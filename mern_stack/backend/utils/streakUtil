const calculateDailyStreaks = (completions) => {
    let currentStreak = 0;
    let longestStreak = 0;

    for (let i = 0; i < completions.length; i++) {
        if (i === 0) {
            // Always start the streak at 1 for the first completion
            currentStreak = completions[i].completed ? 1 : 0;
            longestStreak = Math.max(longestStreak, currentStreak);
        } 
        else if (completions[i].completed &&
            new Date(completions[i].date).toDateString() !== new Date(completions[i - 1].date).toDateString() &&
            (new Date(completions[i].date).getDate() - new Date(completions[i - 1].date).getDate()) === 1) {
            // Increment streak if the gap between completions is <= 24 hours
            currentStreak++;
            longestStreak = Math.max(longestStreak, currentStreak);
        } else {
            // Reset streak to 1 for non-consecutive completions
            currentStreak = completions[i].completed ? 1 : 0;
        }
    }    
    return {currentStreak, longestStreak}    

}

const calculateWeeklyStreaks = (completions) => {
    let currentStreak = 0;
    let longestStreak = 0;

    let weeksTracked = new Map();

    completions.forEach(entry => {
        const date = new Date(entry.data);
        const sundayOfWeek = new Date(date);
        sundayOfWeek.setDate(date.getDate() - date.getDay());

        const weekKey = sundayOfWeek.toDateString();

        weeksTracked.set(weekKey, (weeksTracked.get(weekKey) || 0) + 1);
    });

    const sortedWeeks = Array.from(weeksTracked.keys()).sort((a, b) => new Date(a) - new Date (b));

    for(let i = 0; i < sortedWeeks.length; i++){
        if (i===0){
            currentStreak = completions[i].completed ? 1 : 0;
            longestStreak = Math.max(longestStreak, currentStreak);
        }
        else {
            const prevWeek = new Date(sortedWeeks[i-1]);
            const currWeek = new Date(sortedWeeks[i]);

            if(currWeek.getTime() - prevWeek.getTime() === 7*86400000){
                currentStreak++;
                longestStreak = Math.max(longestStreak, currentStreak);
            }
            else{
                currentStreak = completions[i].completed ? 1 : 0;
            }
        }
    }
    return { currentStreak, longestStreak };

}

const calculateMonthlyStreaks = (completions) => {
    let currentStreak = 0;
    let longestStreak = 0;
    let monthsTracked = new Map();

    // Group completions by month-year
    completions.forEach(entry => {
        const date = new Date(entry.date);
        const monthKey = `${date.getFullYear()}-${date.getMonth()}`; 

        monthsTracked.set(monthKey, (monthsTracked.get(monthKey) || 0) + 1);
    });

    // Sort months chronologically
    const sortedMonths = Array.from(monthsTracked.keys()).sort((a, b) => {
        const [yearA, monthA] = a.split('-').map(Number);
        const [yearB, monthB] = b.split('-').map(Number);
        return new Date(yearA, monthA) - new Date(yearB, monthB);
    });

    // Track streaks based on full months
    for (let i = 0; i < sortedMonths.length; i++) {
        if (i === 0) {
            currentStreak = completions[i].completed ? 1 : 0;
            longestStreak = currentStreak;
        } else {
            const [prevYear, prevMonth] = sortedMonths[i - 1].split('-').map(Number);
            const [currYear, currMonth] = sortedMonths[i].split('-').map(Number);

            // Check if month skipped
            if ((currYear === prevYear && currMonth === prevMonth + 1) || 
                (currYear === prevYear + 1 && currMonth === 0 && prevMonth === 11)) {
                currentStreak++;
                longestStreak = Math.max(longestStreak, currentStreak);
            } else {
                // Reset streak only if full month skipped
                currentStreak = completions[i].completed ? 1 : 0;
            }
        }
    }

    return { currentStreak, longestStreak };
};

const calculateAndUpdateStreaks = (habit) => {
    const completions = habit.completions
        .filter((entry) => entry.completed)
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    
    let streakData = {currentStreak: 0, longestStreak: 0};


    if(habit.frequency === 'daily') {
        streakData = calculateDailyStreaks(completions);
    }
    else if(habit.frequency === 'weekly') {
        streakData = calculateWeeklyStreaks(completions);
    }

    habit.currentStreak = streakData.currentStreak;
    habit.longestStreak = streakData.longestStreak;

    console.log('Current Streak:', habit.currentStreak);
    console.log('Longest Streak:', habit.longestStreak);
};

module.exports = { calculateAndUpdateStreaks, calculateDailyStreaks, calculateWeeklyStreaks };
/*const calculateAndUpdateStreaks = (habit) => {
    const completions = habit.completions
        .filter((entry) => entry.completed)
        .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    let currentStreak = 0;
    let longestStreak = 0;

    for (let i = 0; i < completions.length; i++) {
        if (i === 0) {
            // Always start the streak at 1 for the first completion
            currentStreak = completions[i].completed ? 1 : 0;
            longestStreak = Math.max(longestStreak, currentStreak);
        } 
            else if (completions[i].completed &&
                new Date(completions[i].date).toDateString() !== new Date(completions[i - 1].date).toDateString() &&
                new Date(completions[i].date).getTime() - new Date(completions[i - 1].date).getTime() === 86400000) {
            // Increment streak if the gap between completions is <= 24 hours
            currentStreak++;
            longestStreak = Math.max(longestStreak, currentStreak);
        } else {
            // Reset streak to 1 for non-consecutive completions
            currentStreak = completions[i].completed ? 1 : 0;
        }
    }
    
    habit.currentStreak = currentStreak;
    habit.longestStreak = longestStreak;
    console.log('Current Streak:', habit.currentStreak);
    console.log('Longest Streak:', habit.longestStreak);
};

module.exports = { calculateAndUpdateStreaks };
*/
